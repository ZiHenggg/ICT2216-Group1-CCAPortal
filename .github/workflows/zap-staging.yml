name: ZAP login Full Scan Pre-Deployment (Local Flask)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  FLASK_PORT: 5000

jobs:
  zap_fullscan:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose curl

      - name: Restore config.py, .env, and bypass files from secrets
        run: |
          echo "${{ secrets.CONFIG_PY_BASE64 }}" | base64 -d > config.py
          echo "${{ secrets.ENV_FILE_BASE64 }}" | base64 -d > docker/.env

          echo "${{ secrets.CI_CAPTCHA_UTILS_BASE64 }}" | base64 -d > application/captcha_utils.py
          echo "${{ secrets.CI_AUTH_UTILS_BASE64 }}" | base64 -d > application/auth_utils.py
          echo "${{ secrets.CI_M_ROUTE_BASE64 }}" | base64 -d > application/misc_routes.py

      - name: Start Docker app (nginx-compose)
        run: |
          docker compose -f docker/nginx-compose.yml up -d
        timeout-minutes: 3

      - name: Wait for Flask app to be ready
        run: |
          for i in {1..20}; do
            sleep 5
            if curl -sI http://localhost:$FLASK_PORT/health | grep "200 OK"; then
              echo "Flask app is ready!"
              exit 0
            fi
            echo "Waiting for app... ($i/20)"
          done
          docker ps
          docker logs ccap-flask-app || true
          exit 1

      - name: Log in with test accounts (admin, moderator, student)
        run: |
          echo "Logging in as admin..."
          curl -X POST http://localhost:$FLASK_PORT/login -c admin_cookie.txt \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=${{ secrets.A_USERNAME }}&password=${{ secrets.A_PWD }}"

          echo "Logging in as moderator..."
          curl -X POST http://localhost:$FLASK_PORT/login -c mod_cookie.txt \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=${{ secrets.M_USERNAME }}&password=${{ secrets.M_PWD }}"

          echo "Logging in as student..."
          curl -X POST http://localhost:$FLASK_PORT/login -c student_cookie.txt \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "username=${{ secrets.S_USERNAME }}&password=${{ secrets.S_PWD }}"

          echo "All logins completed."

      - name: Run ZAP Full Scan (localhost)
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://localhost:5000'
          cmd_options: '-a'
          artifact_name: zap-fullscan-flask-${{ github.run_id }}-${{ github.run_attempt }}
